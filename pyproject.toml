[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=42", # At least v42 of setuptools required.
  "versioningit",
]

[tool.versioningit.vcs]
method = "git"
default-tag = "0.0.0"

[project]
name = "sqlalchemy-cratedb"
description = "SQLAlchemy dialect for CrateDB."
readme = "README.md"
keywords = [
  "CrateDB",
  "dask",
  "data io",
  "orm",
  "pandas",
  "PostgreSQL",
  "rdbms",
  "sql",
  "SQLAlchemy",
]
license = { text = "Apache License 2.0" }
authors = [
  { name = "Crate.io", email = "office@crate.io" },
]
requires-python = ">=3.6"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Plugins",
  "Intended Audience :: Customer Service",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: End Users/Desktop",
  "Intended Audience :: Information Technology",
  "Intended Audience :: Manufacturing",
  "Intended Audience :: Science/Research",
  "Intended Audience :: System Administrators",
  "Intended Audience :: Telecommunications Industry",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: OS Independent",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Unix",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.6",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Programming Language :: SQL",
  "Topic :: Adaptive Technologies",
  "Topic :: Communications",
  "Topic :: Database",
  "Topic :: Documentation",
  "Topic :: Education",
  "Topic :: Internet",
  "Topic :: Office/Business",
  "Topic :: Scientific/Engineering",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Pre-processors",
  "Topic :: Software Development :: Testing",
  "Topic :: Software Development :: Version Control",
  "Topic :: System :: Archiving",
  "Topic :: System :: Benchmark",
  "Topic :: System :: Clustering",
  "Topic :: System :: Distributed Computing",
  "Topic :: System :: Logging",
  "Topic :: System :: Monitoring",
  "Topic :: System :: Networking",
  "Topic :: System :: Systems Administration",
  "Topic :: Text Processing",
  "Topic :: Utilities",
]
dynamic = [
  "version",
]
dependencies = [
  'backports.zoneinfo<1; python_version < "3.9"',
  "crate==1.0.0dev0",
  "geojson<4,>=2.5",
  'importlib-resources; python_version < "3.9"',
  "sqlalchemy<2.1,>=1",
  "verlib2==0.2",
]
[project.optional-dependencies]
all = [
  "sqlalchemy-cratedb[vector]",
]
develop = [
  "black<25",
  "mypy<1.11",
  "poethepoet<0.28",
  "pyproject-fmt<2.2",
  "ruff<0.5",
  "validate-pyproject<0.19",
]
doc = [
  "crate-docs-theme>=0.26.5",
  "sphinx<8,>=3.5",
]
release = [
  "build<2",
  "twine<6",
]
test = [
  "cratedb-toolkit[testing]",
  "dask[dataframe]",
  "pandas<2.3",
  "pueblo>=0.0.7",
  "pytest<9",
  "pytest-cov<6",
  "pytest-mock<4",
]
vector = [
  "numpy",
]
[project.urls]
changelog = "https://github.com/crate/sqlalchemy-cratedb/blob/main/CHANGES.md"
documentation = "https://cratedb.com/docs/sqlalchemy-cratedb/"
homepage = "https://cratedb.com/docs/sqlalchemy-cratedb/"
repository = "https://github.com/crate/sqlalchemy-cratedb"
[project.entry-points."sqlalchemy.dialects"]
crate = "sqlalchemy_cratedb:dialect"

[tool.black]
line-length = 100

[tool.coverage.paths]
source = [
  "src/",
]

[tool.coverage.run]
branch = false
omit = [
  "tests/*",
]

[tool.coverage.report]
fail_under = 0
show_missing = true
exclude_lines = [
  "# pragma: no cover",
  "raise NotImplemented"
]

[tool.mypy]
mypy_path = "src"
packages = ["sqlalchemy_cratedb"]
exclude = [
]
check_untyped_defs = true
explicit_package_bases = true
ignore_missing_imports = true
implicit_optional = true
install_types = true
namespace_packages = true
non_interactive = true
# Needed until `mypy-0.990` for `ConverterDefinition` in `converter.py`.
# https://github.com/python/mypy/issues/731#issuecomment-1260976955
# enable_recursive_aliases = true

[tool.pytest.ini_options]
addopts = """
  -rfEXs -p pytester --strict-markers --verbosity=3
  --cov --cov-report=term-missing --cov-report=xml
  """
minversion = "2.0"
log_level = "DEBUG"
log_cli_level = "DEBUG"
log_format = "%(asctime)-15s [%(name)-36s] %(levelname)-8s: %(message)s"
pythonpath = [
  "src"
]
testpaths = [
  "examples",
  "sqlalchemy_cratedb",
  "tests",
]
python_files = [
  "test_*.py",
  "*_test.py",
]
xfail_strict = true
markers = [
]

[tool.ruff]
line-length = 100

select = [
  # Bandit
  "S",
  # Bugbear
  "B",
  # Builtins
  "A",
  # comprehensions
  "C4",
  # eradicate
  "ERA",
  # flake8-2020
  "YTT",
  # isort
  "I",
  # pandas-vet
  "PD",
  # print
  "T20",
  # Pycodestyle
  "E",
  "W",
  # Pyflakes
  "F",
  # return
  "RET",
]

extend-ignore = [
  # zip() without an explicit strict= parameter
  "B905",
  # df is a bad variable name. Be kinder to your future self.
  "PD901",
  # Unnecessary variable assignment before `return` statement
  "RET504",
  # Unnecessary `elif` after `return` statement
  "RET505",
  # Probable insecure usage of temporary file or directory
  "S108",
]

extend-exclude = [
]

[tool.ruff.per-file-ignores]
"*/tests/*" = [
  "S101",  # Allow use of `assert`, and `print`.
  "S608",  # Possible SQL injection vector through string-based query construction.
]
"examples/*" = ["T201"]  # Allow `print`


# ===================
# Tasks configuration
# ===================

[tool.poe.tasks]

check = [
  # "lint",
  "test",
]

format = [
  { cmd = "black ." },
  # Configure Ruff not to auto-fix (remove!):
  # unused imports (F401), unused variables (F841), `print` statements (T201), and commented-out code (ERA001).
  { cmd = "ruff --fix --ignore=ERA --ignore=F401 --ignore=F841 --ignore=T20 --ignore=ERA001 ." },
  { cmd = "pyproject-fmt --keep-full-version pyproject.toml" },
]

lint = [
  { cmd = "ruff ." },
  { cmd = "black --check ." },
  { cmd = "validate-pyproject pyproject.toml" },
  { cmd = "mypy" },
]

release = [
  { cmd = "python -m build" },
  { cmd = "twine upload --skip-existing dist/*" },
]

test = [
  { cmd = "pytest" },
  { cmd = "python -m unittest -vvv tests/integration.py" },
]
